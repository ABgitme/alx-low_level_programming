!<arch>
0-isupper.c/    0           0     0     644     291       `
#include "main.h"
#include <ctype.h>
/**
 * _isupper- check the code.
 * @c: value check
 * Return: 1 if c is uppercase
 */
int _isupper(int c)
{
char uppercase = 'A';
int isupper = 0;
for (; uppercase <= 'Z'; uppercase++)
{
if (c == uppercase)
{
isupper = 1;
break;
}
}
return (isupper);
}

0-memset.c/     0           0     0     644     245       `
#include "main.h"
/**
 * _memset - sets char
 * @s: char to set
 * @b: char
 * @n: number of bytes to print
 * Return: char - print
 */
char *_memset(char *s, char b, unsigned int n)
{
char *set = s;
while (n--)
{
*s = b;
s++;
}
return (set);
}

0-strcat.c/     0           0     0     644     376       `
#include "main.h"
/**
 * _strcat - a function that copies the string pointed to by src,
 * @dest: the string to concatenate
 * @src: the string from concatenate
 * Return: pointer to dest
 */
char *_strcat(char *dest, char *src)
{
int i;
int j;
for (i = 0; dest[i] != '\0'; i++)
{
}
for (j = 0; src[j] != '\0'; j++, i++)
{
dest[i] = src[j];
}
dest[i] = '\0';
return (dest);
}
100-atoi.c/     0           0     0     644     478       `
#include "main.h"
#include <stdio.h>

/**
 * _atoi - a function that converts string to integer
 * @s: An input string
 * Return: integer from conversion
 */
int _atoi(char *s)
{
	int sign = 1;
	unsigned int total = 0;
	char null_flag = 0;

	while (*s)
	{
		if (*s == '-')
			sign *= -1;

		if (*s >= '0' && *s <= '9')
		{
			null_flag = 1;
			total = total * 10 + *s - '0';
		}

		else if (null_flag)
			break;
		s++;
	}

	if (sign < 0)
		total = (-total);

	return (total);
}
1-isdigit.c/    0           0     0     644     192       `
#include "main.h"
#include <ctype.h>
/**
 * _isdigit- check the code.
 * @c: value check
 * Return: 1 if c is uppercase
 */
int _isdigit(int c)
{
if (isdigit(c))
{
return (1);
}
return (0);
}
1-memcpy.c/     0           0     0     644     345       `
#include "main.h"
/**
 * _memcpy - sets char
 * @dest: char to set
 * @src: char
 * @n: number of bytes to print
 * Return: char destination
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i;
char *ch_dest = (char *) dest;
char *ch_src = (char *) src;
for (i = 0; i < n; i++)
{
ch_dest[i] = ch_src[i];
}
return (dest);
}

1-strncat.c/    0           0     0     644     422       `
#include "main.h"
/**
 * _strncat - a function that copies the string pointed to by src,
 * @dest: the string to concatenate
 * @src: the string from concatenate
 * @n: the number of bytes to copy
 * Return: pointer to dest
 */
char *_strncat(char *dest, char *src, int n)
{
int i;
int j;
for (i = 0; dest[i] != '\0'; i++)
{
}
for (j = 0; src[j] != src[n]; j++, i++)
{
dest[i] = src[j];
}
dest[i] = '\0';
return (dest);
}
2-strchr.c/     0           0     0     644     264       `
#include "main.h"
#include <stddef.h>
/**
 * _strchr - sets char
 * @s: char to set
 * @c: char
 * Return: char destination
 */
char *_strchr(char *s, char c)
{
while (*s != '\0')
{
if (*s == c)
{
return (s);
}
s++;
}
if (*s == c)
{
return (s);
}
return (NULL);
}
2-strlen.c/     0           0     0     644     212       `
#include "main.h"
/**
 * _strlen -  a function that returns the length of a string.
 * @s: An input string
 * Return: Nothing
 */
int _strlen(char *s)
{
int len = 0;
while (s[len] != '\0')
len++;
return (len);
}
2-strncpy.c/    0           0     0     644     446       `
#include "main.h"
/**
 * _strncpy - a function that copys the strings.
 * @dest: an input string
 * @src: an input string
 * @n: an input integer
 * Return: A pointer to the resulting string
 */
char *_strncpy(char *dest, char *src, int n)
{
int srclen = 0;
int i = 0;
char *temp = dest;
char *start = src;
while (*src)
{
srclen++;
src++;
}
srclen++;
if (n > srclen)
n = srclen;
src = start;
for (; i < n; i++)
*dest++ = *src++;
return (temp);
}
3-islower.c/    0           0     0     644     235       `
#include "main.h"
/**
 * _islower - Check if a char is lowercase
 * @c: The char to be checked
 *
 * Return: 1 if the char is lowercase. 0 otherwise
 */
int _islower(int c)
{
if (c >= 97 && c <= 122)
{
return (1);
}
else
return (0);
}

3-puts.c/       0           0     0     644     206       `
#include "main.h"
#include <string.h>
/**
 * _puts - Solve me
 * @str: character
 * Return: noting
 */
void _puts(char *str)
{
int n = 0;
while (str[n] != '\0')
{
_putchar(str[n]);
n++;
}
_putchar('\n');
}
3-strcmp.c/     0           0     0     644     286       `
#include "main.h"
/**
 * _strcmp - a function that compares two strings.
 * @s1: an input string
 * @s2: an input string
 * Return: The difference s1 - s2
 */
int _strcmp(char *s1, char *s2)
{
while (*s1 && *s2)
{
if (*s1 != *s2)
return (*s1 - *s2);
s1++, s2++;
}
return (*s1 - *s2);
}
3-strspn.c/     0           0     0     644     390       `
#include "main.h"
#include <stdbool.h>
/**
 * _strspn - sets char
 * @s: char to set
 * @accept: char
 * Return: counter
 */
unsigned int _strspn(char *s, char *accept)
{
int count = 0;
int i, j;
for (i = 0; s[i] != '\0'; i++)
{
bool match = false;
for (j = 0; accept[j] != '\0'; j++)
{
if (s[i] == accept[j])
{
match = true;
break;
}
}
if (!match)
break;
else
count++;
}
return (count);
}
4-isalpha.c/    0           0     0     644     259       `
#include "main.h"
/**
 * _isalpha - letter, lowercase or uppercase
 * @c: The char to be checked
 *
 * Return: 1 if the char is lowercase. 0 otherwise
 */
int _isalpha(int c)
{
if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
return (1);
else
return (0);
}

4-strpbrk.c/    0           0     0     644     496       `
#include "main.h"
#include <stdio.h>
/**
 * _strpbrk -  a function that searches a string for any of a set of bytes.
 * @s: an input string
 * @accept: an input character with to locate into string s
 * Return:  a pointer to the byte in s that matches one of the bytes in accept,
 * or NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept)
{
char *start = accept;
while (*s)
{
while (*accept)
{
if (*accept == *s)
return (s);
accept++;
}
accept = start;
s++;
}
return (NULL);
}
5-strstr.c/     0           0     0     644     306       `
#include "main.h"
#include <string.h>
/**
 * _strstr - sets char
 * @haystack: char to set
 * @needle: char
 * Return: char
 */
char *_strstr(char *haystack, char *needle)
{
int n = strlen(needle);
while (*haystack)
{
if (!memcmp(haystack, needle, n))
{
return (haystack);
}
haystack++;
}
return (NULL);
}
6-abs.c/        0           0     0     644     219       `
#include "main.h"
#include <stdlib.h>
/**
 * _abs - that prints signs
 * @n: value to be checked
 *
 * Return: 1 if n is greater than zero. 0 if n is zero.-1 n is less than zero
 */
int _abs(int n)
{
return (abs(n));
}

9-strcpy.c/     0           0     0     644     437       `
#include "main.h"
/**
 * _strcpy - a function that copies the string pointed to by src,
 * including the terminating null byte (\0),
 * to the buffer pointed to by dest.
 *
 * @dest: A pointer to destination of string
 * @src: A pointer to source string to copy from
 *
 * Return: pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
int j;
for (j = 0; src[j] != '\0'; j++)
{
dest[j] = src[j];
}
dest[j++] = '\0';
return (dest);
}

main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

